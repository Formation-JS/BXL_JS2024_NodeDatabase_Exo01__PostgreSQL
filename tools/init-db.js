import pg from 'pg';
import chalk from 'chalk';


async function initDB() {
    console.log(chalk.blue('Initialisation de la base de donnée...'));
    
    //! Initialisation du client DB
    const client = new pg.Client({
        host: process.env.PGHOST,
        port: process.env.PGPORT,
        user: process.env.PGUSER,
        password: process.env.PGPASSWORD,
        database: process.env.PGDATABASE
    });

    try {
        //! Connexion à la DB
        await client.connect();

        //! Transaction SQL - Debut
        await client.query('BEGIN');

        //! Création des tables
        await client.query(`
            DROP TABLE IF EXISTS "Movie";
        `);
        await client.query(`
            DROP TABLE IF EXISTS "Genre";
        `);

        await client.query(`
            CREATE TABLE "Genre" (
                "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
                "Name" VARCHAR(50) NOT NULL,
                CONSTRAINT "PK_Genre" PRIMARY KEY("Id"),
                CONSTRAINT "UK_Genre__Name" UNIQUE ("Name")
            );
        `);

        await client.query(`
            CREATE TABLE "Movie" (
                "Id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
                "Name" VARCHAR(50) NOT NULL,
                "Description" VARCHAR(500),
                "ReleaseDate" DATE NOT NULL,
                "Duration" INTEGER NOT NULL,
                "GenreId" INTEGER NOT NULL,
                "Rating" INTEGER,
                "AddedDate" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "UpdatedDate" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT "PK_Movie" PRIMARY KEY("Id"),
                CONSTRAINT "CK_Movie__Rating" CHECK ("Rating" BETWEEN 0 AND 10),
                CONSTRAINT "FK_Movie__Genre" FOREIGN KEY ("GenreId") REFERENCES "Genre"("Id")
            );
        `);

        //! Ajout d'un jeu de donnée initial
        await client.query(`
            INSERT INTO "Genre" ("Id", "Name")
             VALUES (1, 'Action'),
                    (2, 'Comédie'),
                    (3, 'Drame'),
                    (4, 'Horreur'),
                    (5, 'Science-fiction');
        `);

        await client.query(`
            SELECT setval(pg_get_serial_sequence('"Genre"', 'Id'), 5);
        `);

        await client.query(`
            INSERT INTO "Movie" ("Id", "Name", "Description", "ReleaseDate", "Duration", "GenreId", "Rating")
             VALUES (1, 'Le Héros de l''Action', 'Un film plein d''action avec des séquences palpitantes.', '2023-06-15', 120, 1, 8),
                    (2, 'Affaires Comiques', 'Une comédie hilarante sur la vie de bureau.', '2023-04-12', 90, 2, 7),
                    (3, 'Larmes de Joie', 'Un drame émouvant sur l''amour et la perte.', '2023-09-05', 110, 3, 9),
                    (4, 'Allée des Cauchemars', 'Un film d''horreur qui vous tiendra en haleine.', '2023-10-31', 100, 4, 6),
                    (5, 'Monde Futur', 'Une aventure de science-fiction dans un avenir dystopique.', '2023-11-20', 130, 5, 8),
                    (6, 'La Dernière Bataille', 'Un film d''action épique avec des scènes de bataille intenses.', '2023-07-22', 140, 1, 9),
                    (7, 'Bêtises de Bureau', 'Une comédie sur les particularités de la culture de bureau.', '2023-05-18', 95, 2, 7),
                    (8, 'Cœurs Brisés', 'Un drame qui explore les complexités des relations.', '2023-08-14', 115, 3, 8),
                    (9, 'Maison Hantée', 'Un film d''horreur qui se déroule dans un manoir effrayant.', '2023-10-15', 105, 4, 7),
                    (10, 'Odyssée Spatiale', 'Une épopée de science-fiction sur l''exploration spatiale et les rencontres extraterrestres.', '2023-12-05', 150, 5, 9),
                    (11, 'Les Aventures des Ducks', 'Un film passionnant basé sur les aventures de la série "Duck Tales".', '2023-12-15', 95, 2, 8);
        `);

        await client.query(`
            SELECT setval(pg_get_serial_sequence('"Movie"', 'Id'), 11);
        `);
        
        //! Transaction SQL - Validation
        await client.query('COMMIT');

        console.log(chalk.green('Database initialization successful'));
    }
    catch (error) {
        //! Transaction SQL - Retour à l'état initial
        await client.query('ROLLBACK');

        console.log(chalk.red('Database initialization error'));
        console.error(chalk.bgRed(chalk.white(error?.message)));
    }
        finally {
        //! Fermer la connexion à la DB
        await client.end();
    }

    process.exit();
};
initDB();










